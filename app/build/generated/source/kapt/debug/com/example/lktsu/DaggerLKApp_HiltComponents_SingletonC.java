// Generated by Dagger (https://dagger.dev).
package com.example.lktsu;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.example.lktsu.data.room.AppDatabase;
import com.example.lktsu.data.room.HistoryDAO;
import com.example.lktsu.data.room.MarksDAO;
import com.example.lktsu.data.room.NewsDAO;
import com.example.lktsu.data.room.StatementDAO;
import com.example.lktsu.data.room.StudentDAO;
import com.example.lktsu.di.DatabaseModule;
import com.example.lktsu.di.DatabaseModule_ProvideDatabaseFactory;
import com.example.lktsu.di.DatabaseModule_ProvideHistoryDAOFactory;
import com.example.lktsu.di.DatabaseModule_ProvideMarksDAOFactory;
import com.example.lktsu.di.DatabaseModule_ProvideNewsDAOFactory;
import com.example.lktsu.di.DatabaseModule_ProvideRoomRepositoryImplFactory;
import com.example.lktsu.di.DatabaseModule_ProvideStatementDAOFactory;
import com.example.lktsu.di.DatabaseModule_ProvideStudentDAOFactory;
import com.example.lktsu.repositories.RoomRepositoryImpl;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerLKApp_HiltComponents_SingletonC extends LKApp_HiltComponents.SingletonC {
  private final DatabaseModule databaseModule;

  private final ApplicationContextModule applicationContextModule;

  private final DaggerLKApp_HiltComponents_SingletonC singletonC = this;

  private volatile Object appDatabase = new MemoizedSentinel();

  private volatile Object roomRepositoryImpl = new MemoizedSentinel();

  private DaggerLKApp_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam, DatabaseModule databaseModuleParam) {
    this.databaseModule = databaseModuleParam;
    this.applicationContextModule = applicationContextModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private AppDatabase appDatabase() {
    Object local = appDatabase;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = appDatabase;
        if (local instanceof MemoizedSentinel) {
          local = DatabaseModule_ProvideDatabaseFactory.provideDatabase(databaseModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          appDatabase = DoubleCheck.reentrantCheck(appDatabase, local);
        }
      }
    }
    return (AppDatabase) local;
  }

  private StudentDAO studentDAO() {
    return DatabaseModule_ProvideStudentDAOFactory.provideStudentDAO(databaseModule, appDatabase());
  }

  private NewsDAO newsDAO() {
    return DatabaseModule_ProvideNewsDAOFactory.provideNewsDAO(databaseModule, appDatabase());
  }

  private StatementDAO statementDAO() {
    return DatabaseModule_ProvideStatementDAOFactory.provideStatementDAO(databaseModule, appDatabase());
  }

  private MarksDAO marksDAO() {
    return DatabaseModule_ProvideMarksDAOFactory.provideMarksDAO(databaseModule, appDatabase());
  }

  private HistoryDAO historyDAO() {
    return DatabaseModule_ProvideHistoryDAOFactory.provideHistoryDAO(databaseModule, appDatabase());
  }

  private RoomRepositoryImpl roomRepositoryImpl() {
    Object local = roomRepositoryImpl;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = roomRepositoryImpl;
        if (local instanceof MemoizedSentinel) {
          local = DatabaseModule_ProvideRoomRepositoryImplFactory.provideRoomRepositoryImpl(databaseModule, studentDAO(), newsDAO(), statementDAO(), marksDAO(), historyDAO());
          roomRepositoryImpl = DoubleCheck.reentrantCheck(roomRepositoryImpl, local);
        }
      }
    }
    return (RoomRepositoryImpl) local;
  }

  @Override
  public void injectLKApp(LKApp lKApp) {
    injectLKApp2(lKApp);
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  private LKApp injectLKApp2(LKApp instance) {
    LKApp_MembersInjector.injectRoomRepositoryImpl(instance, roomRepositoryImpl());
    return instance;
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private DatabaseModule databaseModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public Builder databaseModule(DatabaseModule databaseModule) {
      this.databaseModule = Preconditions.checkNotNull(databaseModule);
      return this;
    }

    public LKApp_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (databaseModule == null) {
        this.databaseModule = new DatabaseModule();
      }
      return new DaggerLKApp_HiltComponents_SingletonC(applicationContextModule, databaseModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements LKApp_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerLKApp_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerLKApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public LKApp_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityRetainedCImpl extends LKApp_HiltComponents.ActivityRetainedC {
    private final DaggerLKApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl(DaggerLKApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private static final class ActivityCBuilder implements LKApp_HiltComponents.ActivityC.Builder {
      private final DaggerLKApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private Activity activity;

      private ActivityCBuilder(DaggerLKApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
      }

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public LKApp_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
      }
    }

    private static final class ActivityCImpl extends LKApp_HiltComponents.ActivityC {
      private final DaggerLKApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ActivityCImpl activityCImpl = this;

      private ActivityCImpl(DaggerLKApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, Activity activity) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;

      }

      @Override
      public void injectContactsActivity(ContactsActivity contactsActivity) {
        injectContactsActivity2(contactsActivity);
      }

      @Override
      public void injectMainActivity(MainActivity mainActivity) {
        injectMainActivity2(mainActivity);
      }

      @Override
      public void injectMarksActivity(MarksActivity marksActivity) {
        injectMarksActivity2(marksActivity);
      }

      @Override
      public void injectMoreActivity(MoreActivity moreActivity) {
        injectMoreActivity2(moreActivity);
      }

      @Override
      public void injectNewsActivity(NewsActivity newsActivity) {
        injectNewsActivity2(newsActivity);
      }

      @Override
      public void injectStatementsActivity(StatementsActivity statementsActivity) {
        injectStatementsActivity2(statementsActivity);
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), Collections.<String>emptySet(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
      }

      @Override
      public Set<String> getViewModelKeys() {
        return Collections.<String>emptySet();
      }

      @Override
      public ViewModelComponentBuilder getViewModelComponentBuilder() {
        return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
      }

      private ContactsActivity injectContactsActivity2(ContactsActivity instance) {
        ContactsActivity_MembersInjector.injectRoomRepositoryImpl(instance, singletonC.roomRepositoryImpl());
        return instance;
      }

      private MainActivity injectMainActivity2(MainActivity instance) {
        MainActivity_MembersInjector.injectRoomRepositoryImpl(instance, singletonC.roomRepositoryImpl());
        return instance;
      }

      private MarksActivity injectMarksActivity2(MarksActivity instance) {
        MarksActivity_MembersInjector.injectRoomRepositoryImpl(instance, singletonC.roomRepositoryImpl());
        return instance;
      }

      private MoreActivity injectMoreActivity2(MoreActivity instance) {
        MoreActivity_MembersInjector.injectRoomRepositoryImpl(instance, singletonC.roomRepositoryImpl());
        return instance;
      }

      private NewsActivity injectNewsActivity2(NewsActivity instance) {
        NewsActivity_MembersInjector.injectRoomRepositoryImpl(instance, singletonC.roomRepositoryImpl());
        return instance;
      }

      private StatementsActivity injectStatementsActivity2(StatementsActivity instance) {
        StatementsActivity_MembersInjector.injectRoomRepositoryImpl(instance, singletonC.roomRepositoryImpl());
        return instance;
      }

      private static final class FragmentCBuilder implements LKApp_HiltComponents.FragmentC.Builder {
        private final DaggerLKApp_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private Fragment fragment;

        private FragmentCBuilder(DaggerLKApp_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;
        }

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public LKApp_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCI(singletonC, activityRetainedCImpl, activityCImpl, fragment);
        }
      }

      private static final class FragmentCI extends LKApp_HiltComponents.FragmentC {
        private final DaggerLKApp_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private final FragmentCI fragmentCI = this;

        private FragmentCI(DaggerLKApp_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
            Fragment fragment) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;

        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return activityCImpl.getHiltInternalFactoryFactory();
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCI);
        }

        private static final class ViewWithFragmentCBuilder implements LKApp_HiltComponents.ViewWithFragmentC.Builder {
          private final DaggerLKApp_HiltComponents_SingletonC singletonC;

          private final ActivityRetainedCImpl activityRetainedCImpl;

          private final ActivityCImpl activityCImpl;

          private final FragmentCI fragmentCI;

          private View view;

          private ViewWithFragmentCBuilder(DaggerLKApp_HiltComponents_SingletonC singletonC,
              ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
              FragmentCI fragmentCI) {
            this.singletonC = singletonC;
            this.activityRetainedCImpl = activityRetainedCImpl;
            this.activityCImpl = activityCImpl;
            this.fragmentCI = fragmentCI;
          }

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public LKApp_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCI(singletonC, activityRetainedCImpl, activityCImpl, fragmentCI, view);
          }
        }

        private static final class ViewWithFragmentCI extends LKApp_HiltComponents.ViewWithFragmentC {
          private final DaggerLKApp_HiltComponents_SingletonC singletonC;

          private final ActivityRetainedCImpl activityRetainedCImpl;

          private final ActivityCImpl activityCImpl;

          private final FragmentCI fragmentCI;

          private final ViewWithFragmentCI viewWithFragmentCI = this;

          private ViewWithFragmentCI(DaggerLKApp_HiltComponents_SingletonC singletonC,
              ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
              FragmentCI fragmentCI, View view) {
            this.singletonC = singletonC;
            this.activityRetainedCImpl = activityRetainedCImpl;
            this.activityCImpl = activityCImpl;
            this.fragmentCI = fragmentCI;

          }
        }
      }

      private static final class ViewCBuilder implements LKApp_HiltComponents.ViewC.Builder {
        private final DaggerLKApp_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private View view;

        private ViewCBuilder(DaggerLKApp_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;
        }

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public LKApp_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCI(singletonC, activityRetainedCImpl, activityCImpl, view);
        }
      }

      private static final class ViewCI extends LKApp_HiltComponents.ViewC {
        private final DaggerLKApp_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private final ViewCI viewCI = this;

        private ViewCI(DaggerLKApp_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View view) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;

        }
      }
    }

    private static final class ViewModelCBuilder implements LKApp_HiltComponents.ViewModelC.Builder {
      private final DaggerLKApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private SavedStateHandle savedStateHandle;

      private ViewModelCBuilder(DaggerLKApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
      }

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public LKApp_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
      }
    }

    private static final class ViewModelCImpl extends LKApp_HiltComponents.ViewModelC {
      private final DaggerLKApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl = this;

      private ViewModelCImpl(DaggerLKApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandle) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;

      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return Collections.<String, Provider<ViewModel>>emptyMap();
      }
    }
  }

  private static final class ServiceCBuilder implements LKApp_HiltComponents.ServiceC.Builder {
    private final DaggerLKApp_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerLKApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public LKApp_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ServiceCImpl extends LKApp_HiltComponents.ServiceC {
    private final DaggerLKApp_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerLKApp_HiltComponents_SingletonC singletonC, Service service) {
      this.singletonC = singletonC;

    }
  }
}
